score=c(78,79,99),
lec=c("경영과학","알고리즘", "통계분석"),
mean=mean(score))
li <- list(3,
score=c(78,79,99),
lec=c("경영과학","알고리즘", "통계분석"),
mean=mean(score))
li <- list(3,
score=c(78,79,99),
lec=c("경영과학","알고리즘", "통계분석"),
mean=score/3)
li <- list(3,
score=c(78,79,99),
lec=c("경영과학","알고리즘", "통계분석"))
li <- list(3,
score=c(78,79,99),
lec=c("경영과학","알고리즘", "통계분석"),
mean=mean(score))
li <- list(2,
score=c(78,79,99),
lec=c("경영과학","알고리즘", "통계분석"))
li <- list(2,
score=c(78,79,99),
lec=c("경영과학","알고리즘", "통계분석"),
ave=mean(score))
library(dplyr)
li <- list(2,
score=c(78,79,99),
lec=c("경영과학","알고리즘", "통계분석"),
ave=mean(score))
li <- list(2,
score=c(78,79),
lec=c("경영과학","알고리즘", "통계분석"),
)
li <- list(3,
score=c(78,79),
lec=c("경영과학","알고리즘", "통계분석"),
)
li <- list(3,
score=c(78,79,78),
lec=c("경영과학","알고리즘", "통계분석"),
)
li <- list(3,
score=c(78,79),
lec=c("경영과학","알고리즘", "통계분석")
)
li <- list(3,
score=c(78,79),
lec=c("경영과학","알고리즘", "통계분석"),
ave=mean(score)
)
mean(li$score)
li <- list(3,
score=c(78,79),
lec=c("경영과학","알고리즘", "통계분석"))
li
li <- list(3,
lec=c("경영과학","알고리즘", "통계분석"),
score=c(78,79))
li
mean(li$score)
li <- list(3,
lec_n=c("경영과학","알고리즘", "통계분석"),
score=c(78,79))
mary_info <- list(class=c("생산관리", "경영학", "공업회계","실험계획법"),
member=c("kim", "jang", "gu"),
gpa=95.5)
mary_info$fmember
mary_info$member
mary_info$member[3]
mary_info$class[2]
mary_info$class[1]
mary_info$class[1]
mary_info$class[4]
mary_info[[1]][[4]]
#matrix
a <- matrix(1:100, nrow = 20)
a
b <- matrix(1:100, nrow = 20, byrow = T)
b
View(b)
a[5,15]
a[15, 4]
b[15, 4]
b[,4]
b[4,]
#dataframe
c <- as.data.frame(mem=c("gu", "kim", "jeong", "kang", "lee"),
score=c(34,55,22,44,88))
#dataframe
c <- data.frame(mem=c("gu", "kim", "jeong", "kang", "lee"),
score=c(34,55,22,44,88))
c
c[3,2]
c[1:3, "score"]
c[,"score"]
c["mem",]
c[mem,]
c[,"mem"]
c["mem","score"]
c["mem",]
c[,"mem"]
c[2,2]
c[[2]][[2]]
c$score[2]
#column 변수 명 바꾸기
colnames(c)<-c("stu","num")
c
colnames(c)[1] <- c("mem")
c
dim(c)
str(c)
class(c)
dim(c)
colMeans(c)
#dataframe
c <- data.frame(mem=c(TRUE, TRUE, FALSE, FALSE, TRUE),
score=c(34,55,22,44,88))
colMeans(c)
modell <- lm(mem~num, data=c)
colnames(c)[1] <- c("mem")
c
modell <- lm(mem~score, data=c)
class(modell)
model1 <- lm(mem~score, data=c)
class(model1)
summary(model1)
summary(c)
v<-data.frame(letters=c("a", "b", "c"), numbers=c(1,2,3))
v
v[3]
v[[3]]
v[[1]][[3]]
v$letters[[3]]
v[1,3]
v[1,2]
v[3,1]
v[[1]][3]
library(readxl)
library(tidyverse)
library(dplyr)
data<- read.csv("http://stats.idre.ucla.edu/stat/data/hsbdemo.csv")
data<- read_csv("http://stats.idre.ucla.edu/stat/data/hsbdemo.csv")
data<- read.csv("http://stats.idre.ucla.edu/stat/data/hsbdemo.csv")
library(readxl)
library(tidyverse)
library(dplyr)
data <- read.csv("http://stats.idre.ucla.edu/stat/data/hsbdemo.csv")
data
View(data)
data <- read.csv("http://stats.idre.ucla.edu/stat/data/hsb2.txt",delim="/t")
data <- read.delim("http://stats.idre.ucla.edu/stat/data/hsb2.txt", delim="/t")
data_tab <- read.delim("http://stats.idre.ucla.edu/stat/data/hsb2.txt", delim="/t")
data_tab <- read.delim("http://stats.idre.ucla.edu/stat/data/hsb2.txt", delim="/t")
data_tab <- read_delim("http://stats.idre.ucla.edu/stat/data/hsb2.txt", delim="/t")
View(data_tab)
data_tab
md <- tibble(height=c(58,33,92), weight=c(198,298,136))
md
class(md)
class(as.data.frame(md))
as.data.frame(md)
daspaa<-read.spss("http://stats.idre.ucla.edu/stat/data/hsb2.sav")
daspaa<-read_spss("http://stats.idre.ucla.edu/stat/data/hsb2.sav")
daspaa<-read_spss("http://stats.idre.ucla.edu/stat/data/hsb2.sav")
library(foreign)
daspaa<-read.spss("http://stats.idre.ucla.edu/stat/data/hsb2.sav")
download.file("http://stats.idre.ucla.edu/stat/data/hsb2.xls",mode = "wb")
download.file("http://stats.idre.ucla.edu/stat/data/hsb2.xls",mode = "wb")
library(readxl)
download.file("http://stats.idre.ucla.edu/stat/data/hsb2.xls",mode = "wb")
library(installr)
download.file("http://stats.idre.ucla.edu/stat/data/hsb2.xls",mode = "wb")
download.file("http://stats.idre.ucla.edu/stat/data/hsb2.xls","prac_lec.xls",mode = "wb")
daxls <- read_excel("prac_lec.xls")
write.csv(data, file="path/to/save/dacsv.csv")
write.csv(data, file="path//to//save//dacsv.csv")
write.csv(data, file="c://Users//users//desktop//R특강//11//dacsv.csv")
write.csv(data, file="c://Users//users//desktop//R특강//11//dacsv.csv")
write_csv(data, file="c://Users//users//desktop//R특강//11//dacsv.csv")
write.csv(data, file="c://Users//users//desktop//R특강//11//dacsv.csv")
write.csv(data, file="c://Users//users//Desktop//R특강//11//dacsv.csv")
data <- read.csv("http://stats.idre.ucla.edu/stat/data/hsbdemo.csv")
write.csv(data, file="c://Users//users//Desktop//R특강//11//dacsv.csv")
write.csv(data, file="c://Users//users//Desktop//R특강//11//dacsv.csv")
write.csv(data, file="c://Users//users//Desktop//R특강//11//dacsv.csv")
write.csv(data, file="c://Users//users//Desktop//R특강//11//dacsv.csv")
write.csv(data, file="c://Users//users//Desktop//R특강//11//dacsv.csv")
write.csv(data, file="c://Users//users//Desktop//R특강//1dacsv.csv")
write.csv(data, file="c://Users//users//Desktop//R특강//1dacsv.csv")
library(foreign)
write.csv(data, file="c://Users//users//Desktop//R특강//1dacsv.csv")
wirte.dta(data, file="path/to/save/dadata.dta")
write.dta(data, file="path/to/save/dadata.dta")
write.dta(data, file="c://Users//users//Desktop//R특강//1dacsv.csv")
save(data, file="c://Users//users//Desktop//R특강//1dacsv.csv")
save(data, file="c:/Users/users/Desktop/R특강/1dacsv.csv")
library(tidyverse)
save(data, file="c://Users//users//Desktop//R특강//1dacsv.csv")
write.csv(data, file="c://Users//users//Desktop//R특강//1dacsv.csv")
write.csv(data, file="c://Users//users//Desktop//R특강//1dacsv.csv", row.names=F, quote=F)
data_csv <- read.csv("http://stats.idre.ucla.edu/stat/data/hsbdemo.csv")
write.csv(data_csv, file="c://Users//users//Desktop//R특강//1dacsv.csv", row.names=F, quote=F)
write.csv(data_csv, file="path/to/save/data_csv.csv", row.names=F, quote=F)
write.csv(data_csv, file="path//to//save//data_csv.csv", row.names=F, quote=F)
write.csv(data_csv, file="c://Users//uses//Desktop//data_csv.csv", row.names=F, quote=F)
write.csv(data_csv, file="c://Users//uses//Desktop//data_csv.csv")
save(data_csv, file="c://Users//uses//Desktop//data_csv.csv")
daxls <- read_excel("prac_lec.xls")
save(data_csv, file="c://Users//uses//Desktop//data_csv.csv")
write.csv<-(data_csv, file="c://Users//uses//Desktop//data_csv.csv")
write.csv<-("data_csv", file="c://Users//uses//Desktop//data_csv.csv")
write.csv<-(data_csv, file="c://Users//uses//Desktop//data_csv.csv")
write.csv(data_csv, file="c://Users//uses//Desktop//data_csv.csv")
write.csv(data_csv, file="c:\Users\uses\Desktop\data_csv.csv")
write.csv(data_csv, file="c://Users//uses//Desktop//data_csv.csv")
daspaa<-read.spss("http://stats.idre.ucla.edu/stat/data/hsb2.sav")
download.file("http://stats.idre.ucla.edu/stat/data/hsb2.xls","prac_lec.xls",mode = "wb")
write.csv(data_csv, file="c://Users//uses//Desktop//data_csv.csv")
View(data_csv)
View(data_csv)
write.csv(data_csv, file="c://Users//uses//Desktop//data_csv.csv")
Write.csv(data_csv, file="c://Users//uses//Desktop//data_csv.csv")
Write.csv(data_csv, file="c://Users//uses//Desktop//data_csv.csv")
write.csv(data_csv, file="c://Users//uses//Desktop//data_csv.csv")
write.csv(data_csv, file="C://Users//uses//Desktop//data_csv.csv")
write.csv(data_csv, file="C://Users//uses//Desktop//R특강//11//data_csv.csv")
write.csv(data_csv, file="C://Users//uses//Desktop//R특강//11//data_csv.csv")
write.csv(data_csv, file="C://Users//user//Desktop//R특강//data_csv.csv")
write.csv(data_csv, file="C://Users//user//Desktop//R특강//11//data_csv.csv")
write.dta(data, file="C://Users//user//Desktop//R특강//11//dacsv.csv")
#data exploration
dd<- read.csv("http://stats.idre.ucla.edu/stat/data/hsbraw.csv")
View(dd)
mean(dd$read)
median(dd$read)
var(dd$read)
library(ggplot2)
ggplot(data=dd aes(x=write, y=read)) +geom_point()
library(ggplot2)
ggplot(data=dd aes(x=write, y=read)) +geom_point()
ggplot(data=dd, aes(x=write, y=read)) +geom_point()
ggplot(data=dd, aes(x=write)) +geom_histogram()
ggplot(d[dd$math>mean(dd$math)], aes(x=write)) +geom_histogram(bins=10)
ggplot(data[dd$math>mean(dd$math)], aes(x=write)) +geom_histogram(bins=10)
ggplot(d[dd$math>mean(dd$math)], aes(x=write)) +geom_histogram(bins=10)
library(tidyverse)
ggplot(d[dd$math>mean(dd$math)], aes(x=write)) +geom_histogram(bins=10)
library(ggplot2)
ggplot(data=dd, aes(x=write)) +geom_histogram()
ggplot(data=dd, aes(x=write)) +geom_histogram(bins=10)
ggplot(d[dd$math>mean(dd$math)], aes(x=write)) +geom_histogram(bins=10)
ggplot(d[dd$math>mean(dd$math)], l,aes(x=write)) +geom_histogram(bins=10)
ggplot(d[dd$math>mean(dd$math),],aes(x=write)) +geom_histogram(bins=10)
ggplot(dd[dd$math>mean(dd$math),],aes(x=write)) +geom_histogram(bins=10)
ggplot(dd, aes(x=1, y=science)) + geom_boxplot()
table(dd$female)
table(dd$ses)
View(data_tab)
#요인
str(dd$ses)
dd$ses <- factoe(dd$ses, levels=c("low","middle","high"))
dd$ses <- factor(dd$ses, levels=c("low","middle","high"))
str(dd$ses)
levels(dd$ses)
source('C:/Users/user/Desktop/R특강/11/4.R', echo=TRUE)
d$ses[1]
d$ses[1] == "low"
library(installr)
library(readxl)
library(tidyverse)
library(dplyr)
library(foreign)
library(ggplot2)
d$ses[1] == "low"
#data exploration
dd<- read.csv("http://stats.idre.ucla.edu/stat/data/hsbraw.csv")
d$ses[1] == "low"
d$ses[1] == "low"
dd$ses[1] == "low"
as.numeric(dd$ses)
as.numeric(dd$ses[1]) == 1
dd$female <- factor(dd$female)
dd$prog <- factor(dd$prog)
levels(dd$prog)
View(dd)
table(dd$prog)
dd$prog <- factor(dd$prog, levels =  c("academic", "general", "vocation"))
dd$prog
table(dd$prog)
str(dd$prog)
View(dd)
dd$female <- factor(dd$female, level=c("female", "male"))
str(dd$female)
ggplot(dd, aes(x=ses)) + geom_ba
ggplot(dd, aes(x=ses)) + geom_bar
ggplot(dd, aes(x=ses)) + geom_bar()
ggplot(dd, aes(x=prog)) + geom_bar()
#correlation
cor(dd$write, dd$read)
ggplot(dd, aes(x=read, y=write)) + geom_point() +
geom_smooth()
scores <- dd[, c("read", "write")]
scores
cor(scores)
by_fe <- group_by(dd, female)
class(by_fe)
summarize(by_fe, mean(math), var(math))
summarize(dd, mean(math), var(math))
ggplot(dd, aes(x=math)) +
geom_density()
ggplot(dd, aes(x=female, y=math)) +
geom_density()
ggplot(dd, aes(x=math)) +
geom_density()
ggplot(dd, aes(x=female, y=math)) +
geom_density()
ggplot(dd, aes(x=female, y=math)) +
geom_boxplot()
ggplot(by_fe, aes(x=math)) +
geom_density()
#correlation(상관관계)
cor(dd$write, dd$read)
scores <- dd[, c("read", "write")]
cor(scores)
ggplot(dd, aes(x=ses, fill=prog)) +
geom_bar()
ggplot(dd, aes(x=ses, fill=prog)) +
geom_bar(position = dodge)
ggplot(dd, aes(x=ses, fill=prog)) +
geom_bar(position = "dodge")
ggplot(dd, aes(x=read, y=write, color=prog)) +
geom_point()+
geom_smooth()
ggplot(dd, aes(x=read, y=write, color=prog)) +
geom_point()+
geom_smooth()
ggplot(dd, aes(x=ses, fill=prog)) +
geom_bar(position = "dodge") +
geom_wrap(~female)
ggplot(dd, aes(x=ses, fill=prog)) +
geom_bar(position = "dodge") +
facet_wrap(~female)
ggplot(dd, aes(x=awards)) +
geom_density()
ggplot(dd, aes(x=awards, fill=prog)) +
geom_density()
table(dd$awards)
summary(dd$awards)
table(dd_semo$prog)
table(dd_semi$prog)
by_se<-group_by(dd, prog) %>%
summarize(by_se, max(math))
by_se<-group_by(dd, prog)
summarize(by_se, max(math))
table(by_se)
table(by_se$prog)
ggplot(by_se, aes(x=prog, y=math, fill=prog)) +
geom_bar()
ggplot(by_se, aes(x=prog, fill=prog)) +
geom_bar()
summarize(by_se, max(math), IQR=math)
summarize(by_se, max(math))
ggplot(by_se, aes(x=prog, fill=prog)) +
geom_boxplot()
ggplot(by_se, aes(x=prog, fill=prog)) +
geom_bar()
ggplot(dd, aes(x=awards, fill=prog, IQR(math))) +
geom_density()
ggplot(by_se, aes(x=prog, fill=prog)) +
geom_boxplot()
ggplot(dd, aes(x=awards, fill=prog)) +
geom_density()
summarize(by_se, max(math), IQR(math))
ggplot(by_se, aes(x=prog, fill=prog)) +
geom_boxplot()
ggplot(by_se, aes(x=prog,y=math,fill=prog)) +
geom_boxplot()
#>>data manage
#sorting
dd <- arrange(dd, sience, socst) %>%
head(5)
#>>data manage
#sorting
dd <- arrange(dd, science, socst) %>%
head(5)
#>>data manage
#sorting
dd %>% arrange(dd, science, socst) %>%
head(5)
#>>data manage
#sorting
dd <- arrange(dd, science, socst) %>%
head(5)
dd
dd$science[dd$science == -99] <- NA
head(dd$science)
head(dd$science,10)
head(dd)
head(dd,10)
#>>data manage
#sorting
dd <- arrange(dd, science, socst)
head(dd,10)
dd$science[dd$science == -99] <- NA
head(dd$science,10)
head(dd,10)
dd<-read_csv("http://stats.idre.ucla.edu/stat/data/hsbraw.csv")
dd2<-read_csv("http://stats.idre.ucla.edu/stat/data/hsbraw.csv")
#data exploration
dd<- read.csv("http://stats.idre.ucla.edu/stat/data/hsbraw.csv")
sum(c(1,2,NA), na.rm=TRUE)
install.packages("tseries")
install.packages("forecast")
install.packages("TTR")
library(tseries)
library(forecast)
library(TTR)
king <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat", skip=3)
king.ts <- ts(king)
plot.ts(king.ts)
king.sma3 <- SMA(king.ts, n=3)
plot.ts(king.sma3)
king.sma8 <- SMA(king.ts, n=8)
plot.ts(king.sma8)
#ARIMA
#이전 자료가 비정상성을 띄기에 차분을 실시
king.ff1 <- diff(king.ts, diffrences=1)
plot.ts(king.ff1)
#ACF와 PACF를 통한 ARIMA모델 결정
#ACF
acf(king.ff1, lan.max=20)
#ACF와 PACF를 통한 ARIMA모델 결정
#ACF
acf(king.ff1, lag.max=20)
acf(king.ff1, lag.max=20, plot = FALSE)
#PACF
pacf(king.ff1, lag.max = 20)
pacf(king.ff1, lag.max = 20, plot = FALSE)
#적절한 ARIMA모델 찾기
auto.arima(king)
#forecast
king.arima<arima(king, order = c(0,1,1))
#forecast
king.arima<-arima(king, order = c(0,1,1))
king.for <- forecast(king.arima)
king.for
king.for <- forecast(king.arima, h=5)
king.for
library(MASS)
install.packages("MASS")
install.packages("MASS")
dis<-cmdscale(eurodist)
x<-dis[,1]
y<-dis[,2]
plot(x,y,type = "n",asp = 1,main = "Metric MDS")
test(x,y,rownames(loc),cex=0.7)
test(x,y,rownames(dis),cex=0.7)
text(x,y,rownames(loc),cex=0.7)
text(x,y,rownames(dis),cex=0.7)
abline(v=0,h=0,lty=2,lwd=0.5)
#비계량MDS
swiss.x <- as.matrix(swiss[,-1])
swiss.dist <- dist(swiss.x)
plot(swiss.mds$points, type="n")
swiss.mds <- isoMDS(swiss.dist)
swiss.mds <- isoMDS(swiss.dist)
library(MASS)
swiss.dist <- dist(swiss.x)
swiss.mds <- isoMDS(swiss.dist)
plot(swiss.mds$points, type="n")
text(swiss.mds$points, labels = as.character(1:nrow(swiss.x)))
abline(v=0,h=0,lyy=2,lwd=0.5)
abline(v=0,h=0,lty=2,lwd=0.5)
abline(v=0,h=0,lty=2,lwd=0.5)
abline(v=0,h=0,lty=2,lwd=0.5)
abline(v=0,h=0,lty=2,lwd=0.5)
abline(v=0,h=0,lty=2,lwd=0.5)
text(swiss.mds$points, labels = as.character(1:nrow(swiss.x)))
#비계량MDS(sammon)
swiss.x <- as.matrix(swiss[,-1])
swiss.sammon <- sammon(dist(swiss.x))
plot(swiss.sammon$points, type = "n")
text(swiss.sammon$points, labels = as.character(1:nrow(swiss.x)))
abline(v=0,h=0,lty=2,lwd=0.5)
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
library(datasets)
#4개 변수들 간의 산점도
data("USArrests")
pairs(USArrests, pannel=pannel.smooth, main="USArrests data")
pairs(USArrests, pannel=pannel.smooth, main="USArrests")
pairs(USArrests, panel=panel.smooth, main="USArrests")
pairs(USArrests, panel=panel.smooth, main="USArrests data")
#summary (1,2주성분 활용)
US.prin <- princomp(USArrests, cor=TRUE)
summary(US.prin)
screeplot(US.prin, npcs = 4, type = "lines")
#loading
loadings(US.prin)
#scores
US.prin$scores
#scores
head(5,US.prin$scores)
#scores
head(US.prin$scores,5)
#1,2주성분 행렬도
arrests.pca <- prcomp(USArrests,center = TRUE, scale. = TRUE)
biplot(arrests.pca,scale=0)
